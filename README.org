* Utilities for Mac App launchers

- =mktrampoline= :: Create a “trampoline” launcher app
- =sync-dock= :: Update persistent apps in the Dock
- =sync-trampolines= :: Create a directory with trampolines to all your apps

Made with Nix in mind.

** How to use in Nix

*** Flakes

How to use this in nix-darwin or home-manager, assuming you use flakes:

#+begin_src nix
{
  inputs = {
    #...
    mac-app-util.url = "github:hraban/mac-app-util";
    #...
  };

  outputs = {
    nix-darwin
    , home-manager
    , ...
  }@inputs: {
    darwinConfigurations = {
      MyHost = nix-darwin.lib.darwinSystem {
        # ...
        specialArgs = { inherit inputs; }
        modules = [
          home-manager.darwinModules.home-manager
          (
            { pkgs, config, inputs, ... }@module-inputs:
            {
              home-manager = {
                # ...

                extraSpecialArgs = { inherit (module-inputs) inputs; };
                users.foobar.imports = [
                  (
                    { pkgs, inputs }:
                    {
                      home = {
                        # ...

                        # For home-manager controlled apps. See
                        # https://github.com/nix-community/home-manager/issues/1341
                        activation = {
                          trampolineApps = let
                            apps = pkgs.buildEnv {
                              name = "home-manager-applications";
                              paths = config.home.packages;
                              pathsToLink = "/Applications";
                            };
                            mac-app-util = inputs.mac-app-util.packages.${pkgs.stdenv.system}.default;
                          in lib.hm.dag.entryAfter [ "writeBoundary" ] ''
                            fromDir="${apps}/Applications/"
                            toDir="$HOME/Applications/Home Manager Trampolines"
                            ${mac-app-util}/bin/mac-app-util sync-trampolines "$fromDir" "$toDir"
                        '';
                        };

                      };
                    };
                  )
                ];
              };


              # For system-wide, nix-darwin packages. This works because the
              # postActivation script is run after nix-darwin has aggregated all
              # .app links into a single directory, /Applications/Nix Apps.
              system.activationScripts.postActivation.text = let
                mac-app-util = inputs.mac-app-util.packages.${pkgs.stdenv.system}.default;
              in ''
                ${mac-app-util}/bin/mac-app-util sync-trampolines "/Applications/Nix Apps" "/Applications/Nix Trampolines"
              '';
            }
          )
        ];
      };
    };
  };
}
#+end_src

*** Non-flakes

Since I use flakes for home manager and nix-darwin I’m not 100% on how to do this, but I suspect that it’s similar to the above, at its core.

What will be different is the “plumbing”, i.e. how to get a reference to this app’s derivation. Here’s how:

#+begin_src nix
let
  mac-app-util-src = pkgs.fetchFromGitHub {
    repo = "mac-app-util";
    owner = "hraban";
    rev = "master";
    # Replace this by the output of:
    # nix run --experimental-features 'nix-command flakes' nixpkgs#nix-prefetch-github -- hraban mac-app-util | grep sha
    hash = "";
  };
  mac-app-util = (pkgs.callPackage mac-app-util-src {}).default;
in

...
#+end_src

The rest is up to you. Good luck!
** mktrampoline

This creates a “trampoline” launcher app which is a simple wrapper application that just launches your actual application.

#+begin_src shell
$ nix run github:hraban/mac-app-util -- mktrampoline /path/to/MyApp.app /Applications/MyApp.app
#+end_src

Intuitively, you would either fully copy & paste the original .app, or create a symlink or “alias”; all of those solutions have different problems and they don’t get indexed by Spotlight properly.

This trampoline script is indexed by Spotlight and by Launchpad, so you can keep launching your apps using =⌘ SPC <appname> ⏎=

See https://github.com/nix-community/home-manager/issues/1341

** sync-dock

When you have an app in your Dock which doesn’t live in =/Applications/..=, it can get stale: e.g. your app at =/foo/v1/Foo.app= gets replaced by =/foo/v2/Foo.app=. To automatically update the Dock to the new location of Foo, execute:

#+begin_src shell
$ nix run github:hraban/mac-app-util -- sync-dock Foo.app
#+end_src

It will find an old persistent item by the name of "Foo" and update it to the new location.

N.B.: This is currently limited only to Nix apps, but actually it could work for anything. I’ve just kept it conservative to be on the safe side.

** sync-trampolines

Combines =mktrampoline= and =sync-dock= to create a fresh directory with a fresh trampoline for every source app. E.g.:

#+begin_src shell
$ nix run github:hraban/mac-app-util -- sync-trampolines ~/special/apps/ ~/Applications/Special/
#+end_src

Will create a fresh directory (=~/Applications/Special=), deleting if it already existed. In that directory it will create a trampoline app for every single =*.app= file it finds in =~/special/apps/=.

This helps register apps from outside of your =~/Applications= directory with Spotlight and the Launchpad.

* License

mac-app-util - Manage Mac App launchers
Copyright © 2023  Hraban Luyat

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, version 3 of the License.


This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

